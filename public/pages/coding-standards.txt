1. javascript编码规范
    1.1 编码风格
        1.1.1 命名
            所有的标示符采用小写下划线命名法，以下划线分割单词。
            变量名应简洁且尽量含义确切，全局变量，专用缩写词或常量可采用全大写。
            函数名尽量用动宾短语，明确表示其功能。
            文件的命名遵循变量名规则，严禁包含大写字母。

        1.1.2 变量声明
            所有的变量必须在使用前进行声明，局部变量的声明建议采用就近原则，即在首次使用变量之前声明该变量。
            注意局部变量必须使用var关键字声明，应尽量避免使用全局变量。

        1.1.3 常量
            避免在程序中直接使用数字常量，应该用变量取代。
            示例:
                var  max_length = 18

                if (account.length > max_length) {
                    // ......
                }

        1.1.4 每行宽度
            建议每行只包含一条语句，避免每行超过80个字符，当一条语句写不下时,请考虑换行。
            function_name(array_1.length, array_2.length, array_3.length, array_4.length, 
                          array_5.length)

        1.1.5 嵌套对象的访问
            避免嵌套层数太深的对象或数组的直接访问，应使用临时变量提高可读性。
            示例: 
                var role_list = account_list["shangyoo88"].role_list

                for (var i = 0; i < role_list.length; i++) {
                    // ......
                }


        1.1.6 空格逗号括号分号
            二元操作符除了“.”应用空格将其与操作数隔开。  
            示例: a = b * c       arguments.length
            
            一元操作符与其操作数之间不应有空格。
            示例: a++    
            
            每个逗号后应跟一个空格，例如函数调用语句，数组初始化语句。
            示例: fun(a, b, c)    a = [1, 2, 3]
            
            for语句中的分号后须跟一个空格。
            示例: for (var i = 0; i < b.length; i++)

            在较复杂的表达式中使用括号明确运算的优先级。
            示例: if ((a >= 0) && (b === 0))

            符合语句中条件表达式左端的括号与关键字间建议留一个空格, 紧接左括号之后和后括号之前不应该有空格
            示例: 
                if (a > 0)              
                while (a > 0)
                for (var i = 0; i < a.length; i++)


        1.1.7 代码块缩进
            缩进的单位为四个空格,避免使用tab键缩进。函数体，复合句语句应缩进四个空格，左大括号应与函数声明或复合语句的第一句
            位于同一行，以一个空格分隔，右大括号应与左大括号所在行的开头对齐。大括号应该在所有复合语句中使用,即使只有一条语句。

            示例:
            var test = function() {
                for() {
                    if() {
                        // 只有一行代码
                    }
                }
            }

        1.1.8 函数风格
            每个函数都应该有单纯明确的功能，代码行数尽量避免超过一屏，80%的函数应该在30行以内。如果一个函数太长，流程控制语句太多，一般来说就是因为这个函数功能太复杂，做了太多事情，应该考虑拆分该函数。
            用空行来将逻辑相关的代码块分割开可以提高程序的可读性。
            
            示例:     
            var random_int = function (min, max) {
                var r = Math.random()
                var diff = max - min

                r = parseInt(r * diff + min)
                r = (r < min) ? min : r
                r = (r > max) ? max : r

                return r
            }


    1.2 服务器端编码要求
        1.2.1 模块引用
            避免在代码里使用require语句，公共模块应放在ms.js里引用，站点自定义模块放在app.js里引用，同时模块名需加上站点前缀。

        1.2.2 数据库使用
            对数据库的使用应严格按照以下格式：ms.db.mssql[库名] , ms.db.mongo[库名][集合名]
        
        1.2.3 日志打印
            应在程序流程的关键步骤添加必要的日志信息，使用ms.log模块打印日志 


2. jade编码规范
    2.1 缩进的单位为四个空格,避免使用tab键缩进。
    2.2 定义元素的时候，先写id名，后写class名。
    2.3 id名和class名避免使用大写字母，尽量使用含义明确的名字。
    2.4 元素有多个属性时，属性的逗号后面应跟空格。
    2.5 避免内嵌的CSS属性和javascript代码。
    2.6 当页面元素太多时，应拆分为多个jade文件，模块化编码。


3. stylesheets编码规范
    3.1 避免直接写CSS代码
    3.2 缩进的单位为四个空格,避免使用tab键缩进。
    3.3 应该以变量的形式访问图片资源，在文件开头定义资源地址
